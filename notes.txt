R1 --> A --> R2 --> S

---

R1 --> A --> R2 --> S
R3 --> B __/

R2 -> R1
R2 -> R3

---

R1 --> A --> R2 --> S
   \__ B __/

R1 -> R2

---

R1 --> A --> R2 --> D --> R3 --> S
  \\__ B __//
   \__ C __/---> E

---

Attachments can only be written to by a single render pass

If a render pass has no inputs, it's a level 1 render pass and all of its outputs
are level 1

If a render pass has inputs, its level is the max of the levels of its inputs

Sort render passes by level

Passes of the same level can be parallelized
Passes with the same inputs and outputs can be combined

---

4/14

Finished pipeline layout creation from reflection data, save for push constants.

Push constants are tricky; any kind of solution would want something like a linker
for multiple shader stages. I can ignore them for now, but in the future:

On pipeline layout creation:
- For every stage, extract the type names and members
- If any type names match up between stages assert that the types are exactly 
  the same.
- Expose the type (ubo or push constant) as one through the material interface

Need to do a test run. Create a render pass and pipeline _in code_ to see if the
layout works.

---

8/21

Simplifying. Forget about render program stuff for now.

Long term though:

(build time) steps are done at build time. Could probably just write python for these

Stage 1 (build time): Render programs are built and validated at build time. This is
basically like linking shaders together. Pass dependencies, resources, and (maybe) 
pass order are specified via a DSL (or maybe just json).

Output of this stage is parameters to construct layout objects and pipeline objects,
and an IR for sequential pass calls/synchronization and stuff

Stage 2 (build time) (optional): Materials are validated against parameters for layout 
objects. These are just bags of resources which match with a pipeline.

Stage 3 (runtime): Layout objects, pipelines, and materials are loaded into actual VK
resources. Execute IR for render programs